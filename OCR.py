# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R6NYXWNf8mFosWgJRoUE-AfEkrzcYOCX
"""

import cv2
import csv
import glob
import pandas as pd
import numpy as np
from google.colab import drive
from mlxtend.regressor import StackingRegressor
import matplotlib.pyplot as plt

drive.mount('/content/drive')

data = pd.read_csv('/content/drive/MyDrive/Data/dataset3.csv')
data

X = data.drop(["label"], axis = 1)
Y = data["label"]

idx = 16999
img = X.loc[idx].values.reshape(128,64)
print(Y[idx])
plt.imshow(img)

from sklearn.model_selection import train_test_split
train_x, test_x,train_y,test_y = train_test_split(X,Y, test_size= 0.2)

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
model = RandomForestClassifier(n_estimators=1, max_features= 3780)
rfc = model.fit(train_x,train_y)
y_pred = rfc.predict(test_x)
model.score(test_x,test_y)
print(f"Training Set Score : {rfc.score(train_x, train_y) * 100} %")
print(f"Test Set Score : {rfc.score(test_x, test_y) * 100} %")

#Printing classification report of classifier on the test set set data
print(f"Model Classification Report : \n{classification_report(test_y, rfc.predict(test_x))}")

from sklearn.ensemble import ExtraTreesClassifier
from sklearn.metrics import classification_report
etc = ExtraTreesClassifier(n_estimators=1,max_features= 3780)
ETC = etc.fit(train_x, train_y)
pred_etc = ETC.predict(test_x)
etc.score(test_x,test_y)
print(f"Training Set Score : {ETC.score(train_x, train_y) * 100} %")
print(f"Test Set Score : {ETC.score(test_x, test_y) * 100} %")

# Printing classification report of classifier on the test set set data
print(f"Model Classification Report : \n{classification_report(test_y, ETC.predict(test_x))}")

from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report
neigh = KNeighborsClassifier(n_neighbors=500)
ng= neigh.fit(train_x,train_y)
ng.score(test_x,test_y)

print(f"Training Set Score : {ng.score(train_x, train_y) * 100} %")
print(f"Test Set Score : {ng.score(test_x, test_y) * 100} %")

# Printing classification report of classifier on the test set set data
print(f"Model Classification Report : \n{classification_report(test_y, ng.predict(test_x))}")

from sklearn import tree
from sklearn.metrics import classification_report
DT = tree.DecisionTreeClassifier(max_depth=100,max_features= 3780)
DT= DT.fit(train_x,train_y)
DT.score(test_x,test_y)
print(f"Training Set Score : {DT.score(train_x, train_y) * 100} %")
print(f"Test Set Score : {DT.score(test_x, test_y) * 100} %")

# Printing classification report of classifier on the test set set data
print(f"Model Classification Report : \n{classification_report(test_y, DT.predict(test_x))}")

from sklearn.neighbors import NearestCentroid
from sklearn.metrics import classification_report

from sklearn.metrics import classification_report
NC = NearestCentroid()
NC=NC.fit(train_x,train_y)
NC.score(test_x,test_y)

print(f"Training Set Score : {NC.score(train_x, train_y) * 100} %")
print(f"Test Set Score : {NC.score(test_x, test_y) * 100} %")

# Printing classification report of classifier on the test set set data
print(f"Model Classification Report : \n{classification_report(test_y, NC.predict(test_x))}")

from sklearn.preprocessing import StandardScaler
from mlxtend import regressor
from mlxtend.regressor import StackingRegressor
from sklearn.svm import SVR
from sklearn.ensemble import VotingClassifier as VC
from sklearn.metrics import classification_report


vc = VC([['rfc', rfc],['ETC', ETC],['ng', ng],['DT',DT],['NC', NC]],voting='hard')
ensemble = vc.fit(train_x,train_y)
y_pred = vc.predict(test_x)
vc.score(test_x,test_y)
print(f"Training Set Score : {ensemble.score(train_x, train_y) * 100} %")
print(f"Test Set Score : {ensemble.score(test_x, test_y) * 100} %")

# Printing classification report of classifier on the test set set data
print(f"Model Classification Report : \n{classification_report(test_y, ensemble.predict(test_x))}")